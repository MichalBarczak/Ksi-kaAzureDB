// <auto-generated />
using System;
using SerwisKlientów.db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace SerwisKlientów.Migrations
{
    [DbContext(typeof(SQLDBContext))]
    partial class SQLDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Modele.Adres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Glowny")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdKlienta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KlientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KodPocztowy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miasto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumerDomu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumerMieszkania")
                        .HasColumnType("int");

                    b.Property<string>("Państwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.ToTable("Adresy");
                });

            modelBuilder.Entity("Modele.ElementZamowienia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProduktu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdZamowienia")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IlośćProduktu")
                        .HasColumnType("int");

                    b.Property<Guid?>("ZamowienieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ZamowienieId");

                    b.ToTable("ElementZamowienia");
                });

            modelBuilder.Entity("Modele.Klient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imię")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NumerTelefonu")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Klienci");
                });

            modelBuilder.Entity("Modele.Zamowienie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<double>("CenaDostawy")
                        .HasColumnType("float");

                    b.Property<Guid>("IdAdresu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdKlienta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("KlientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SposobDostawy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SposobPlatnosci")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusZamowienia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Upust")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("KlientId");

                    b.ToTable("Zamowienie");
                });

            modelBuilder.Entity("Modele.Adres", b =>
                {
                    b.HasOne("Modele.Klient", null)
                        .WithMany("Adresy")
                        .HasForeignKey("KlientId");
                });

            modelBuilder.Entity("Modele.ElementZamowienia", b =>
                {
                    b.HasOne("Modele.Zamowienie", null)
                        .WithMany("ElementyZamowienia")
                        .HasForeignKey("ZamowienieId");
                });

            modelBuilder.Entity("Modele.Zamowienie", b =>
                {
                    b.HasOne("Modele.Klient", null)
                        .WithMany("Zamowienia")
                        .HasForeignKey("KlientId");
                });

            modelBuilder.Entity("Modele.Klient", b =>
                {
                    b.Navigation("Adresy");

                    b.Navigation("Zamowienia");
                });

            modelBuilder.Entity("Modele.Zamowienie", b =>
                {
                    b.Navigation("ElementyZamowienia");
                });
#pragma warning restore 612, 618
        }
    }
}
